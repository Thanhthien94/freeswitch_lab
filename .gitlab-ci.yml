image: docker:26.1.3

services:
  - docker:26.1.3-dind

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  DOCKER_BUILDKIT: "1"
  IMAGE_TAG: "$CI_COMMIT_SHA"
  BRANCH_TAG: "$CI_COMMIT_REF_SLUG"
  APP_IMAGE: "$CI_REGISTRY_IMAGE/app"
  PORTAL_IMAGE: "$CI_REGISTRY_IMAGE/portal"
  COMPOSE_FILE: docker-compose.build.yml
  SERVICES_TO_BUILD: "app portal freeswitch"
  FREESWITCH_IMAGE: "$CI_REGISTRY_IMAGE/freeswitch"
  DEFAULT_FS_TOKEN: "pat_5XdJ51UgrgFDLrjDkKhcb5F6"
  BUILD_PLATFORMS: "linux/amd64,linux/arm64"
  BUILDX_BUILDER: "fs-multiarch"

stages:
  - build
  - tag
  - webhook
  - update-manifest-development

default:
  before_script:
    - apk add --no-cache curl
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"

compose-build:
  stage: build
  artifacts:
    paths:
      - services-built.txt
    reports:
      dotenv: build.env
  script:
    - export FS_TOKEN="${FS_TOKEN:-$DEFAULT_FS_TOKEN}"
    - |
      set -e
      if ! docker buildx inspect "$BUILDX_BUILDER" >/dev/null 2>&1; then
        docker buildx create --name "$BUILDX_BUILDER" --use
      else
        docker buildx use "$BUILDX_BUILDER"
      fi
      docker buildx inspect --bootstrap "$BUILDX_BUILDER"
    - |
      set -e
      git fetch origin "$CI_DEFAULT_BRANCH" --depth=1 >/dev/null 2>&1 || true
      BASE_SHA="$CI_COMMIT_BEFORE_SHA"
      if [ -z "$BASE_SHA" ] || [ "$BASE_SHA" = "0000000000000000000000000000000000000000" ]; then
        BASE_SHA=$(git merge-base "$CI_COMMIT_SHA" "origin/$CI_DEFAULT_BRANCH")
      fi
      echo "Comparing changes against $BASE_SHA"
      CHANGED_FILES=$(git diff --name-only "$BASE_SHA" "$CI_COMMIT_SHA")
      printf '%s\n' "$CHANGED_FILES" | sort | uniq > changed_files.txt
      declare -a CHANGED_SERVICES=()
      mark_service() {
        local dir="$1"
        local service="$2"
        if grep -q "^${dir}/" changed_files.txt || grep -q "^docker/" changed_files.txt || grep -q "^docker-compose.build.yml$" changed_files.txt || grep -q "^.gitlab-ci.yml$" changed_files.txt; then
          CHANGED_SERVICES+=("$service")
        fi
      }
      mark_service "app" "app"
      mark_service "portal" "portal"
      mark_service "freeswitch" "freeswitch"
      printf "%s\n" "${CHANGED_SERVICES[@]}" | sort -u > services-built.txt
      if [ ${#CHANGED_SERVICES[@]} -eq 0 ]; then
        echo "SKIP_TAG_JOBS=true" > build.env
        echo "No relevant changes detected; skipping build."
        exit 0
      fi
      echo "SKIP_TAG_JOBS=false" > build.env
      printf "Services to build: %s\n" "${CHANGED_SERVICES[*]}"
      for service in "${CHANGED_SERVICES[@]}"; do
        case "$service" in
          app)
            docker buildx build \
              --platform "$BUILD_PLATFORMS" \
              -f docker/app.Dockerfile \
              -t "$APP_IMAGE:${IMAGE_TAG}" \
              --push \
              app
            ;;
          portal)
            docker buildx build \
              --platform "$BUILD_PLATFORMS" \
              -f docker/portal.Dockerfile \
              -t "$PORTAL_IMAGE:${IMAGE_TAG}" \
              --push \
              portal
            ;;
          freeswitch)
            docker buildx build \
              --platform "$BUILD_PLATFORMS" \
              --build-arg FS_TOKEN="$FS_TOKEN" \
              -f docker/freeswitch.Dockerfile \
              -t "$FREESWITCH_IMAGE:${IMAGE_TAG}" \
              --push \
              .
            ;;
          *)
            echo "Unknown service $service" >&2
            exit 1
            ;;
        esac
      done
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH'

push-latest:
  stage: tag
  needs:
    - compose-build
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
  script:
    - if [ "${SKIP_TAG_JOBS}" = "true" ]; then echo "Skipping push-latest"; exit 0; fi
    - SERVICES=$(cat services-built.txt)
    - if [ -z "$SERVICES" ]; then echo "No services to tag"; exit 0; fi
    - for service in $SERVICES; do
        SOURCE_IMAGE="$CI_REGISTRY_IMAGE/$service:${IMAGE_TAG}";
        TARGET_IMAGE="$CI_REGISTRY_IMAGE/$service:latest";
        docker pull "$SOURCE_IMAGE";
        docker tag "$SOURCE_IMAGE" "$TARGET_IMAGE";
        docker push "$TARGET_IMAGE";
      done

push-branch-tag:
  stage: tag
  needs:
    - compose-build
  rules:
    - if: '$CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH'
  script:
    - if [ "${SKIP_TAG_JOBS}" = "true" ]; then echo "Skipping push-branch-tag"; exit 0; fi
    - SERVICES=$(cat services-built.txt)
    - if [ -z "$SERVICES" ]; then echo "No services to tag"; exit 0; fi
    - for service in $SERVICES; do
        SOURCE_IMAGE="$CI_REGISTRY_IMAGE/$service:${IMAGE_TAG}";
        TARGET_IMAGE="$CI_REGISTRY_IMAGE/$service:${BRANCH_TAG}";
        docker pull "$SOURCE_IMAGE";
        docker tag "$SOURCE_IMAGE" "$TARGET_IMAGE";
        docker push "$TARGET_IMAGE";
      done

push-release-tag:
  stage: tag
  needs:
    - compose-build
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+(\.[0-9]+)*$/'
  script:
    - if [ "${SKIP_TAG_JOBS}" = "true" ]; then echo "Skipping push-release-tag"; exit 0; fi
    - SERVICES=$(cat services-built.txt)
    - if [ -z "$SERVICES" ]; then echo "No services to tag"; exit 0; fi
    - for service in $SERVICES; do
        SOURCE_IMAGE="$CI_REGISTRY_IMAGE/$service:${IMAGE_TAG}";
        TARGET_IMAGE="$CI_REGISTRY_IMAGE/$service:$CI_COMMIT_TAG";
        docker pull "$SOURCE_IMAGE";
        docker tag "$SOURCE_IMAGE" "$TARGET_IMAGE";
        docker push "$TARGET_IMAGE";
      done

webhook:
  stage: webhook
  needs:
    - compose-build
  rules:
    - if: '$CI_COMMIT_BRANCH == "development"'
  script:
    - if [ "${SKIP_TAG_JOBS}" = "true" ]; then echo "Skipping webhook deployment"; exit 0; fi
    - DEPLOY_IMAGE="$APP_IMAGE:${IMAGE_TAG}"
    - echo "Deploying $DEPLOY_IMAGE to CapRover app $CAPROVER_APP_NAME"
    - docker run --rm caprover/cli-caprover:2.2.3 caprover deploy --appToken "$CAPROVER_APP_TOKEN" --caproverUrl "$CAPROVER_URL" --imageName "$DEPLOY_IMAGE" --appName "$CAPROVER_APP_NAME"

update-manifest-development:
  stage: update-manifest-development
  needs:
    - compose-build
  rules:
    - if: '$CI_COMMIT_BRANCH == "development"'
  variables:
    GIT_REPO: "https://gitlab.com/vqtuan96/vill-k8s-configs.git"
    APP_FOLDER: "helm-dispatcher"
  script:
    - if [ "${SKIP_TAG_JOBS}" = "true" ]; then echo "Skipping manifest update"; exit 0; fi
    - |
      set -e
      apk add --no-cache git
      git config --global user.name "vo quoc tuan"
      git config --global user.email "vqtuan96@gmail.com"
      git clone "https://$GITLAB_CONFIG_USERNAME:$GITLAB_CONFIG_PASSWORD@gitlab.com/vqtuan96/vill-k8s-configs.git" config
      cd config/$APP_FOLDER
      sed -i "s/tag:.*/tag: ${IMAGE_TAG}/g" values.yaml
      git add values.yaml
      git commit -m "ci: update image tag to ${IMAGE_TAG}" || echo "No changes to commit"
      git push origin main
