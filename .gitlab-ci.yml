image: docker:26.1.3

services:
  - docker:26.1.3-dind

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  DOCKER_BUILDKIT: "1"
  IMAGE_TAG: "$CI_COMMIT_SHA"
  BRANCH_TAG: "$CI_COMMIT_REF_SLUG"
  APP_IMAGE: "$CI_REGISTRY_IMAGE/app"
  PORTAL_IMAGE: "$CI_REGISTRY_IMAGE/portal"
  COMPOSE_FILE: docker-compose.build.yml
  SERVICES_TO_BUILD: "app portal freeswitch"
  FREESWITCH_IMAGE: "$CI_REGISTRY_IMAGE/freeswitch"
  DEFAULT_FS_TOKEN: "pat_5XdJ51UgrgFDLrjDkKhcb5F6"
  BUILD_PLATFORMS: "linux/amd64,linux/arm64"
  BUILDX_BUILDER: "fs-multiarch"

stages:
  - build
  - tag
  - webhook
  - update-manifest-development

default:
  before_script:
    - apk add --no-cache curl
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"

build:app:
  stage: build
  needs: []
  rules:
    - changes:
        - app/**
        - docker/app.Dockerfile
        - docker-compose.build.yml
        - .gitlab-ci.yml
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH'
  script:
    - docker buildx create --use --name "$BUILDX_BUILDER" || docker buildx use "$BUILDX_BUILDER"
    - docker buildx inspect --bootstrap "$BUILDX_BUILDER"
    - |
      docker buildx build \
        --platform "$BUILD_PLATFORMS" \
        -f docker/app.Dockerfile \
        -t "$APP_IMAGE:${IMAGE_TAG}" \
        --push \
        app
    - echo "APP_BUILT=true" > app.build.env
  artifacts:
    reports:
      dotenv: app.build.env
    expire_in: 1 hour

build:portal:
  stage: build
  needs: []
  rules:
    - changes:
        - portal/**
        - docker/portal.Dockerfile
        - docker-compose.build.yml
        - .gitlab-ci.yml
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH'
  script:
    - docker buildx create --use --name "$BUILDX_BUILDER" || docker buildx use "$BUILDX_BUILDER"
    - docker buildx inspect --bootstrap "$BUILDX_BUILDER"
    - |
      docker buildx build \
        --platform "$BUILD_PLATFORMS" \
        -f docker/portal.Dockerfile \
        -t "$PORTAL_IMAGE:${IMAGE_TAG}" \
        --push \
        portal
    - echo "PORTAL_BUILT=true" > portal.build.env
  artifacts:
    reports:
      dotenv: portal.build.env
    expire_in: 1 hour

build:freeswitch:
  stage: build
  needs: []
  rules:
    - changes:
        - docker/freeswitch.Dockerfile
        - docker/fs-entrypoint.sh
        - freeswitch/**
        - docker-compose.build.yml
        - .gitlab-ci.yml
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH'
  script:
    - docker buildx create --use --name "$BUILDX_BUILDER" || docker buildx use "$BUILDX_BUILDER"
    - docker buildx inspect --bootstrap "$BUILDX_BUILDER"
    - |
      docker buildx build \
        --platform "$BUILD_PLATFORMS" \
        --build-arg FS_TOKEN="${FS_TOKEN:-$DEFAULT_FS_TOKEN}" \
        -f docker/freeswitch.Dockerfile \
        -t "$FREESWITCH_IMAGE:${IMAGE_TAG}" \
        --push \
        .
    - echo "FREESWITCH_BUILT=true" > freeswitch.build.env
  artifacts:
    reports:
      dotenv: freeswitch.build.env
    expire_in: 1 hour

push-latest:
  stage: tag
  needs:
    - build:app
    - build:portal
    - build:freeswitch
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
  script:
    - SERVICES=""
    - if [ -f app.build.env ]; then . app.build.env; SERVICES="$SERVICES app"; fi
    - if [ -f portal.build.env ]; then . portal.build.env; SERVICES="$SERVICES portal"; fi
    - if [ -f freeswitch.build.env ]; then . freeswitch.build.env; SERVICES="$SERVICES freeswitch"; fi
    - if [ -z "${SERVICES// }" ]; then echo "No images built; skipping push-latest"; exit 0; fi
    - for service in $SERVICES; do
        SOURCE_IMAGE="$CI_REGISTRY_IMAGE/$service:${IMAGE_TAG}";
        TARGET_IMAGE="$CI_REGISTRY_IMAGE/$service:latest";
        docker pull "$SOURCE_IMAGE";
        docker tag "$SOURCE_IMAGE" "$TARGET_IMAGE";
        docker push "$TARGET_IMAGE";
      done

push-branch-tag:
  stage: tag
  needs:
    - build:app
    - build:portal
    - build:freeswitch
  rules:
    - if: '$CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH'
  script:
    - SERVICES=""
    - if [ -f app.build.env ]; then . app.build.env; SERVICES="$SERVICES app"; fi
    - if [ -f portal.build.env ]; then . portal.build.env; SERVICES="$SERVICES portal"; fi
    - if [ -f freeswitch.build.env ]; then . freeswitch.build.env; SERVICES="$SERVICES freeswitch"; fi
    - if [ -z "${SERVICES// }" ]; then echo "No images built; skipping push-branch-tag"; exit 0; fi
    - for service in $SERVICES; do
        SOURCE_IMAGE="$CI_REGISTRY_IMAGE/$service:${IMAGE_TAG}";
        TARGET_IMAGE="$CI_REGISTRY_IMAGE/$service:${BRANCH_TAG}";
        docker pull "$SOURCE_IMAGE";
        docker tag "$SOURCE_IMAGE" "$TARGET_IMAGE";
        docker push "$TARGET_IMAGE";
      done

push-release-tag:
  stage: tag
  needs:
    - build:app
    - build:portal
    - build:freeswitch
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+(\.[0-9]+)*$/'
  script:
    - SERVICES=""
    - if [ -f app.build.env ]; then . app.build.env; SERVICES="$SERVICES app"; fi
    - if [ -f portal.build.env ]; then . portal.build.env; SERVICES="$SERVICES portal"; fi
    - if [ -f freeswitch.build.env ]; then . freeswitch.build.env; SERVICES="$SERVICES freeswitch"; fi
    - if [ -z "${SERVICES// }" ]; then echo "No images built; skipping push-release-tag"; exit 0; fi
    - for service in $SERVICES; do
        SOURCE_IMAGE="$CI_REGISTRY_IMAGE/$service:${IMAGE_TAG}";
        TARGET_IMAGE="$CI_REGISTRY_IMAGE/$service:$CI_COMMIT_TAG";
        docker pull "$SOURCE_IMAGE";
        docker tag "$SOURCE_IMAGE" "$TARGET_IMAGE";
        docker push "$TARGET_IMAGE";
      done

webhook:
  stage: webhook
  needs:
    - build:app
  rules:
    - if: '$CI_COMMIT_BRANCH == "development"'
  script:
    - if [ ! -f app.build.env ]; then echo "App image not built; skipping deployment"; exit 0; fi
    - DEPLOY_IMAGE="$APP_IMAGE:${IMAGE_TAG}"
    - echo "Deploying $DEPLOY_IMAGE to CapRover app $CAPROVER_APP_NAME"
    - docker run --rm caprover/cli-caprover:2.2.3 caprover deploy --appToken "$CAPROVER_APP_TOKEN" --caproverUrl "$CAPROVER_URL" --imageName "$DEPLOY_IMAGE" --appName "$CAPROVER_APP_NAME"

update-manifest-development:
  stage: update-manifest-development
  needs:
    - build:app
  rules:
    - if: '$CI_COMMIT_BRANCH == "development"'
  variables:
    GIT_REPO: "https://gitlab.com/vqtuan96/vill-k8s-configs.git"
    APP_FOLDER: "helm-dispatcher"
  script:
    - if [ ! -f app.build.env ]; then echo "App image not built; skipping manifest update"; exit 0; fi
    - |
      set -e
      apk add --no-cache git
      git config --global user.name "vo quoc tuan"
      git config --global user.email "vqtuan96@gmail.com"
      git clone "https://$GITLAB_CONFIG_USERNAME:$GITLAB_CONFIG_PASSWORD@gitlab.com/vqtuan96/vill-k8s-configs.git" config
      cd config/$APP_FOLDER
      sed -i "s/tag:.*/tag: ${IMAGE_TAG}/g" values.yaml
      git add values.yaml
      git commit -m "ci: update image tag to ${IMAGE_TAG}" || echo "No changes to commit"
      git push origin main
